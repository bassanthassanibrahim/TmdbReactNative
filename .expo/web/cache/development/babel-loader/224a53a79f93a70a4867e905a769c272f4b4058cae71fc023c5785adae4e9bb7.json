{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SyntheticPlatformEmitter, CodedError } from 'expo-modules-core';\nimport { VoiceQuality } from \"./Speech.types\";\nvar MAX_SPEECH_INPUT_LENGTH = 32767;\nfunction _getVoices() {\n  return _regeneratorRuntime.async(function getVoices$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve) {\n            var voices = window.speechSynthesis.getVoices();\n            if (voices.length > 0) {\n              resolve(voices);\n              return;\n            }\n            window.speechSynthesis.onvoiceschanged = function () {\n              var voices = window.speechSynthesis.getVoices();\n              resolve(voices);\n            };\n          }));\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport default {\n  get name() {\n    return 'ExponentSpeech';\n  },\n  speak: function speak(id, text, options) {\n    return function _callee() {\n      var message, voices, _voices;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(text.length > MAX_SPEECH_INPUT_LENGTH)) {\n                _context2.next = 2;\n                break;\n              }\n              throw new CodedError('ERR_SPEECH_INPUT_LENGTH', 'Speech input text is too long! Limit of input length is: ' + MAX_SPEECH_INPUT_LENGTH);\n            case 2:\n              message = new SpeechSynthesisUtterance();\n              if (typeof options.rate === 'number') {\n                message.rate = options.rate;\n              }\n              if (typeof options.pitch === 'number') {\n                message.pitch = options.pitch;\n              }\n              if (typeof options.language === 'string') {\n                message.lang = options.language;\n              }\n              if (typeof options.volume === 'number') {\n                message.volume = options.volume;\n              }\n              if (!('_voiceIndex' in options && options._voiceIndex != null)) {\n                _context2.next = 12;\n                break;\n              }\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(_getVoices());\n            case 10:\n              voices = _context2.sent;\n              message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n            case 12:\n              if (!(typeof options.voice === 'string')) {\n                _context2.next = 17;\n                break;\n              }\n              _context2.next = 15;\n              return _regeneratorRuntime.awrap(_getVoices());\n            case 15:\n              _voices = _context2.sent;\n              message.voice = _voices[Math.max(0, _voices.findIndex(function (voice) {\n                return voice.voiceURI === options.voice;\n              }))];\n            case 17:\n              if (typeof options.onResume === 'function') {\n                message.onresume = options.onResume;\n              }\n              if (typeof options.onMark === 'function') {\n                message.onmark = options.onMark;\n              }\n              if (typeof options.onBoundary === 'function') {\n                message.onboundary = options.onBoundary;\n              }\n              message.onstart = function (nativeEvent) {\n                SyntheticPlatformEmitter.emit('Exponent.speakingStarted', {\n                  id: id,\n                  nativeEvent: nativeEvent\n                });\n              };\n              message.onend = function (nativeEvent) {\n                SyntheticPlatformEmitter.emit('Exponent.speakingDone', {\n                  id: id,\n                  nativeEvent: nativeEvent\n                });\n              };\n              message.onpause = function (nativeEvent) {\n                SyntheticPlatformEmitter.emit('Exponent.speakingStopped', {\n                  id: id,\n                  nativeEvent: nativeEvent\n                });\n              };\n              message.onerror = function (nativeEvent) {\n                SyntheticPlatformEmitter.emit('Exponent.speakingError', {\n                  id: id,\n                  nativeEvent: nativeEvent\n                });\n              };\n              message.text = text;\n              window.speechSynthesis.speak(message);\n              return _context2.abrupt(\"return\", message);\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getVoices: function getVoices() {\n    return function _callee2() {\n      var voices;\n      return _regeneratorRuntime.async(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(_getVoices());\n            case 2:\n              voices = _context3.sent;\n              return _context3.abrupt(\"return\", voices.map(function (voice) {\n                return {\n                  identifier: voice.voiceURI,\n                  quality: VoiceQuality.Default,\n                  isDefault: voice.default,\n                  language: voice.lang,\n                  localService: voice.localService,\n                  name: voice.name,\n                  voiceURI: voice.voiceURI\n                };\n              }));\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  isSpeaking: function isSpeaking() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", window.speechSynthesis.speaking);\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  stop: function stop() {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", window.speechSynthesis.cancel());\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  pause: function pause() {\n    return function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", window.speechSynthesis.pause());\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  resume: function resume() {\n    return function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", window.speechSynthesis.resume());\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  maxSpeechInputLength: MAX_SPEECH_INPUT_LENGTH\n};","map":{"version":3,"names":["SyntheticPlatformEmitter","CodedError","VoiceQuality","MAX_SPEECH_INPUT_LENGTH","getVoices","_regeneratorRuntime","async","getVoices$","_context","prev","next","abrupt","Promise","resolve","voices","window","speechSynthesis","length","onvoiceschanged","stop","name","speak","id","text","options","_callee","message","_voices","_callee$","_context2","SpeechSynthesisUtterance","rate","pitch","language","lang","volume","_voiceIndex","awrap","sent","voice","Math","min","max","findIndex","voiceURI","onResume","onresume","onMark","onmark","onBoundary","onboundary","onstart","nativeEvent","emit","onend","onpause","onerror","_callee2","_callee2$","_context3","map","identifier","quality","Default","isDefault","default","localService","isSpeaking","_callee3","_callee3$","_context4","speaking","_callee4","_callee4$","_context5","cancel","pause","_callee5","_callee5$","_context6","resume","_callee6","_callee6$","_context7","maxSpeechInputLength"],"sources":["/home/bassant/NewReactTmdb/TMDB-The-Movie-Database/node_modules/expo-speech/src/Speech/ExponentSpeech.web.ts"],"sourcesContent":["import { SyntheticPlatformEmitter, CodedError } from 'expo-modules-core';\n\nimport { SpeechOptions, WebVoice, VoiceQuality } from './Speech.types';\n\n//https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text\nconst MAX_SPEECH_INPUT_LENGTH = 32767;\n\nasync function getVoices(): Promise<SpeechSynthesisVoice[]> {\n  return new Promise<SpeechSynthesisVoice[]>((resolve) => {\n    const voices = window.speechSynthesis.getVoices();\n\n    if (voices.length > 0) {\n      resolve(voices);\n      return;\n    }\n\n    // when a page loads it takes some amount of time to populate the voices list\n    // see https://stackoverflow.com/a/52005323/4337317\n    window.speechSynthesis.onvoiceschanged = function () {\n      const voices = window.speechSynthesis.getVoices();\n      resolve(voices);\n    };\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentSpeech';\n  },\n  async speak(id: string, text: string, options: SpeechOptions): Promise<SpeechSynthesisUtterance> {\n    if (text.length > MAX_SPEECH_INPUT_LENGTH) {\n      throw new CodedError(\n        'ERR_SPEECH_INPUT_LENGTH',\n        'Speech input text is too long! Limit of input length is: ' + MAX_SPEECH_INPUT_LENGTH\n      );\n    }\n\n    const message = new SpeechSynthesisUtterance();\n\n    if (typeof options.rate === 'number') {\n      message.rate = options.rate;\n    }\n    if (typeof options.pitch === 'number') {\n      message.pitch = options.pitch;\n    }\n    if (typeof options.language === 'string') {\n      message.lang = options.language;\n    }\n    if (typeof options.volume === 'number') {\n      message.volume = options.volume;\n    }\n    if ('_voiceIndex' in options && options._voiceIndex != null) {\n      const voices = await getVoices();\n      message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n    }\n    if (typeof options.voice === 'string') {\n      const voices = await getVoices();\n      message.voice =\n        voices[\n          Math.max(\n            0,\n            voices.findIndex((voice) => voice.voiceURI === options.voice)\n          )\n        ];\n    }\n    if (typeof options.onResume === 'function') {\n      message.onresume = options.onResume;\n    }\n    if (typeof options.onMark === 'function') {\n      message.onmark = options.onMark;\n    }\n    if (typeof options.onBoundary === 'function') {\n      message.onboundary = options.onBoundary;\n    }\n\n    message.onstart = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingStarted', { id, nativeEvent });\n    };\n    message.onend = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingDone', { id, nativeEvent });\n    };\n    message.onpause = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingStopped', { id, nativeEvent });\n    };\n    message.onerror = (nativeEvent: SpeechSynthesisErrorEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingError', { id, nativeEvent });\n    };\n\n    message.text = text;\n\n    window.speechSynthesis.speak(message);\n\n    return message;\n  },\n  async getVoices(): Promise<WebVoice[]> {\n    const voices = await getVoices();\n    return voices.map((voice) => ({\n      identifier: voice.voiceURI,\n      quality: VoiceQuality.Default,\n      isDefault: voice.default,\n      language: voice.lang,\n      localService: voice.localService,\n      name: voice.name,\n      voiceURI: voice.voiceURI,\n    }));\n  },\n  async isSpeaking(): Promise<boolean> {\n    return window.speechSynthesis.speaking;\n  },\n  async stop(): Promise<void> {\n    return window.speechSynthesis.cancel();\n  },\n  async pause(): Promise<void> {\n    return window.speechSynthesis.pause();\n  },\n  async resume(): Promise<void> {\n    return window.speechSynthesis.resume();\n  },\n  maxSpeechInputLength: MAX_SPEECH_INPUT_LENGTH,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}